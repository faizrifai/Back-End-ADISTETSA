Install package pertama kali
1. aktivasi env
2. Jalankan perintah "pip install -r requirements.txt"

Aktifasi tiap env
activate.bat 

Run server
python manage.py runserver

Make Super Admin 
python manage.py createsuperuser

Migrate
python manage.py makemigrations
python manage.py migrate

Akun admin
username: arzelf
password: merdeka123 

Tambah Dummy Data
python manage.py setup_dummy_dataprofil





class DataTugasTambahanGuruListView(generics.ListCreateAPIView):
        """
        get: Menampilkan daftar karya tulis guru (Guru).
        post: Menambahkan data karya tulis guru (Guru).
        """
        permission_classes = [HasGroupPermissionAny]
        required_groups = {
            'GET': ['Guru'],
            'POST': ['Guru'],
        }
        serializer_class = DataTugasTambahanGuruSerializer

        def get_data_guru(self):
            user = self.request.user
            data_guru = DataGuruUser.objects.get(USER=user).DATA_GURU

            return data_guru

        def get_queryset(self):
            data_guru = self.get_data_guru()

            return DataTugasTambahanGuru.objects.filter(OWNER=data_guru.ID)

        def perform_create(self, serializer):
            serializer.validated_data['OWNER_id'] = self.get_data_guru().ID

            return super(DataTugasTambahanGuruListView, self).perform_create(serializer)


class DataTugasTambahanGuruDetailView(APIView):
        """
        get: Menampilkan daftar karya tulis guru (Guru).
        put: Mengubah atribut keseluruhan data karya tulis guru (Guru).
        patch: Mengubah beberapa atribut data karya tulis guru (Guru).
        delete: Menghapus data karya tulis guru (Guru).
        """
        permission_classes = [HasGroupPermissionAny]
        required_groups = {
            'GET': ['Guru'],
            'PUT': ['Guru'],
            'PATCH': ['Guru'],
            'DELETE': ['Guru'],
        }
        serializer_class = DataTugasTambahanGuruSerializer

        def get_queryset(self):
            user = self.request.user
            data_guru = DataGuruUser.objects.get(USER=user).DATA_GURU

            return DataTugasTambahanGuru.objects.get(pk=self.kwargs['pk'], OWNER=data_guru.ID)

        def get(self, request, pk, *args, **kwargs):
            queryset = self.get_queryset(pk)
            serializer = self.serializer_class
            response = serializer(queryset).data

            return Response(response)

        @swagger_auto_schema(
            request_body=schema_datatunjanganguru,
            responses={'200': 'Berhasil mengupdate data tunjangan guru', '400': 'Bad Request',}
        )
        def put(self, request, pk, format=None):
            queryset = self.get_queryset(pk)
            serializer = self.serializer_class(queryset, data=request.data)
            if serializer.is_valid():
                serializer.save()

                return Response(serializer.data)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        @swagger_auto_schema(
            request_body=schema_datatunjanganguru,
            responses={'200': 'Berhasil mengupdate data tunjangan guru', '400': 'Bad Request',}
        )
        def patch(self, request, pk):
            queryset = self.get_queryset(pk)
            serializer = self.serializer_class(queryset, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()

                return Response(serializer.data)

            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        def delete(self, request, pk, format=None):
            queryset = self.get_queryset(pk)
            queryset.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
