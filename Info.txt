--Install package pertama kali
1. aktivasi env
2. Jalankan perintah "pip install -r requirements.txt"

--Aktifasi tiap env
activate.bat 

--Run server
python manage.py runserver

--Membuat Super Admin 
python manage.py createsuperuser

--Migrate
python manage.py makemigrations
python manage.py migrate

--Menjalankan Dummy Data
python run_setup_dummy.py

--Membuat app 
python manage.py startapp nameapp

--Hapus Migrasi
find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
find . -path "*/migrations/*.pyc"  -delete

--Mengatasi konflik github
Catatan: Lakukan selalu sebelum melakukan 'git push'

1. Lakukan perubahan pada kode di penyimpanan lokal seperti biasa.
2. Jalankan perintah "git add ." atau klik tombol "Changes > Stage All Changes" pada VS Code untuk menambahkan perubahan kode ke git.
3. Jalankan perintah "git commit -m 'Isi pesan' " atau klik tombol "Commit > Commit Staged" pada VS code untuk menambahkan pesan commit ke git.
4. Sebelum melakukan push, kita harus menjalankan perintah "git pull" terlebih dulu untuk mendapatkan perubahan yang terjadi pada remote server yaitu github.
5. Jika saat menjalankan perintah nomor 4 terdapat pesan error/ warning "Need to specify how to reconcile divergent branches.", maka ketikkan "git config pull.rebase false" pada cmd/ terminal di VS Code terlebih dulu.
6. Jika saat menjalankan perintah nomor 4 terdapat pesan error/ warning "Automatic merge failed; fix conflicts and then commit the result.", maka buka file yang terdapat conflict di VS Code, pesan tempat konflik pada baris kode akan ditampilkan, dan akan terdapat pilihan seperti "Accept incoming changes" (untuk menimpa perubahan remote server dengan perubahan lokal yang baru), "Accept current changes" (untuk menimpa perubahan lokal dengan perubahan dari remote server), dan "Accept both changes" untuk menggabungkan kode dari lokal dan kode dari remote.
7. Setelah memilih opsi untuk mengatasi conflict pada nomor 6, jalankan perintah "git commit" atau klik tombol "Commit > Commit" pada VS Code.
8. Konflik berhasil di fix, jalankan perintah "git push", maka perintah akan dijalankan tanpa pesan warning/ error lagi.

--Referensi
Referensi Faker yang bisa digunakan untuk Dummy Data
https://faker.readthedocs.io/en/master/providers.html

Referensi Django Model
https://docs.djangoproject.com/en/4.0/topics/db/models/

Django Rest Framework
https://www.django-rest-framework.org/tutorial/quickstart/

Dump Database
python manage.py dumpdata --natural-foreign --natural-primary -e contenttypes -e auth.Permission --indent 2 > dump.json

Firebase
from firebase_admin.messaging import Message, Notification
from fcm_django.models import FCMDevice

message = Message(
    notification=Notification(title="title", body="text", image="url"),
    topic="Optional topic parameter: Whatever you want",
)
device = FCMDevice.objects.get(user__username='admin')

status = device.send_message(message)
print(status)

- Docker
COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1  sudo docker-compose -f docker-compose.prod.yml up -d --build
